from bisect import bisect

class Solution:
    # generated by
    # def isValid(x: int) -> bool:
    #     def feasible(patt: str, target: int) -> bool:
    #         if target < 0:
    #             return False
    #         if target == 0:
    #             return int(patt) == 0
    #         if int(patt) <= target:
    #             return int(patt) == target
    #         n = len(patt)
    #         for i in range(1, n):
    #             if feasible(patt[i:], target - int(patt[:i])):
    #                 return True
    #         return False
    #     return feasible(str(x ** 2), x)
    NUMS = (
        1, 9, 10, 36, 45,
        55, 82, 91, 99, 100,
        235, 297, 369, 370, 379,
        414, 657, 675, 703, 756,
        792, 909, 918, 945, 964,
        990, 991, 999, 1000
    )
    PREFIX = (
        1, 82, 182, 1478, 3503,
        6528, 13252, 21533, 31334, 41334,
        96559, 184768, 320929, 457829, 601470,
        772866, 1204515, 1660140, 2154349, 2725885,
        3353149, 4179430, 5022154, 5915179, 6844475,
        7824575, 8806656, 9804657, 10804657
    )
    def punishmentNumber(self, n: int) -> int:
        return self.PREFIX[bisect(self.NUMS, n) - 1]
